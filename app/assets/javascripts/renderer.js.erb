var tdl;

function Scene () {
  this.objects = [];
}

Scene.prototype.draw = function() {
  for (var i = 0; i < this.objects.length; i++) {
    this.objects[i].draw();
  };
};

function Animation () {
  this.frames = [];
  this.currentFrame = 0;
  this.speed = 1;
  this.loop = true;
}

Animation.prototype.getFrame = function() {
  var currentModel = this.frames[Math.floor(this.currentFrame)];
  this.currentFrame+= this.speed;
  if(this.currentFrame >= this.frames.length) {
    this.currentFrame = this.loop ? 0 : this.frames.length - 1;
    currentModel = this.frames[this.currentFrame];
  }
  return currentModel;
};

Animation.prototype.addFrameFromJson = function (name, texture) {
  var modelJson = ""; 
  $.ajax({
      url: 'model_handler/show.json',
      data: { model:name },
      type: 'GET',
      success: function (data) {
        modelJson = data;
      },
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      async: false
  }); 

  var positions = new tdl.primitives.AttribBuffer(3, modelJson.position);
  var normals = new tdl.primitives.AttribBuffer(3, modelJson.normal);
  var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.texCoord);
  var indices = new tdl.primitives.AttribBuffer(3, modelJson.indices, 'Uint16Array');
  var primitives = {
    position: positions,
    normal: normals,
    texCoord: texCoords,
    indices: indices};
  var textures;

  if (typeof texture == 'undefined' ) {
    textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
  } else {
    textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
  }

  var model = new tdl.models.Model(program, primitives, textures);
  this.frames.push(model);
}

function GameObject () {
  var cube = tdl.primitives.createCube(1.0);
  var textures = {diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
  var model = new tdl.models.Model(program, cube, textures);
  this.model = model;
  this.animations = [];
  this.currentAnimation = 0;
  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.width = 1.0;
  this.height = 1.0;
  this.depth = 1.0;
  this.boundWidth = this.width;
  this.boundHeight = this.height;
  this.boundDepth = this.depth;
  this.rotateX = 0.0;
  this.rotateY = 0.0;
  this.rotateZ = 0.0;
  this.transform = new Float32Array(16);
  this.color = [1.0, 1.0, 1.0];
  this.renderBounds = false;
}

GameObject.prototype.loadModelFromJson = function (name, texture) {
  var modelJson = ""; 
  $.ajax({
      url: 'model_handler/show.json',
      data: { model:name },
      type: 'GET',
      success: function (data) {
        modelJson = data;
      },
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      async: false
  }); 
  var positions = new tdl.primitives.AttribBuffer(3, modelJson.position);
  var normals = new tdl.primitives.AttribBuffer(3, modelJson.normal);
  var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.texCoord);
  var indices = new tdl.primitives.AttribBuffer(3, modelJson.indices, 'Uint16Array');
  var primitives = {
    position: positions,
    normal: normals,
    texCoord: texCoords,
    indices: indices};
  
  var textures;

  if (typeof texture == 'undefined' ) {
    textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
  } else {
    textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
  }

  var model = new tdl.models.Model(program, primitives, textures);
  this.model = model;
  
}

GameObject.prototype.setTexture = function(image_path) {
  var textures = {
    diffuseSampler: tdl.textures.loadTexture(image_path)};
    this.model.textures = textures;
};

  
GameObject.prototype.draw = function() {
  if(this.animations.length) {
    this.model = this.animations[this.currentAnimation].getFrame();
  }
  tdl.fast.identity4(this.transform);
  tdl.fast.matrix4.rotateX(this.transform, tdl.math.degToRad(this.rotateX));
  tdl.fast.matrix4.rotateY(this.transform, tdl.math.degToRad(this.rotateY));
  tdl.fast.matrix4.rotateZ(this.transform, tdl.math.degToRad(this.rotateZ));
  tdl.fast.matrix4.scale(this.transform, [this.width, this.height, this.depth]);
  tdl.fast.matrix4.setTranslation(this.transform, [this.x, this.y, this.z]);
  var mvp = new Float32Array(16);
  tdl.fast.matrix4.mul(mvp, this.transform, view);
  tdl.fast.matrix4.mul(mvp, mvp, projection);
  var transformInv = new Float32Array(16);
  tdl.fast.transpose4(transformInv, this.transform)
  tdl.fast.inverse4(transformInv, transformInv)
  this.model.drawPrep();
  this.model.draw({"transform": this.transform, "transformInv": transformInv, "color": this.color, "mvp": mvp});

  if(this.renderBounds) {
    var cube = tdl.primitives.createCube(1.0);
    var textures = {diffuseSampler: tdl.textures.loadTexture([255, 0, 0, 1.0])};
    var boundingBox = new tdl.models.Model(program, cube, textures);
    var boxTransform = new Float32Array(16);
    tdl.fast.identity4(boxTransform);
    tdl.fast.matrix4.scale(boxTransform, [this.boundWidth, this.boundHeight, this.boundDepth]);
    tdl.fast.matrix4.setTranslation(boxTransform, [this.x, this.y, this.z]);
    var mvp = new Float32Array(16);
    tdl.fast.matrix4.mul(mvp, boxTransform, view);
    tdl.fast.matrix4.mul(mvp, mvp, projection);
    var boxTransformInv = new Float32Array(16);
    tdl.fast.inverse4(boxTransformInv, boxTransform)
    boundingBox.drawPrep();
    boundingBox.draw({"transform": boxTransform, "transformInv": boxTransformInv, "color": this.color, "mvp": mvp});
  }

};


var canvas;
var gl;
var program;

var transform = new Float32Array(16);
var view = new Float32Array(16);
var projection = new Float32Array(16);
var eye = [-5.0, 3.0, 2.0];
var sceneToRender;
var renderProcesss;


function createProgramFromTags(vertexTagId, fragmentTagId) {
  return tdl.programs.loadProgram(
      document.getElementById(vertexTagId).text,
      document.getElementById(fragmentTagId).text);
}

function initRenderer() {
  canvas = document.getElementById("canvas");
  canvas.width = $("body").width();
  canvas.height = window.innerHeight - $(".navbar").height();

  gl = tdl.webgl.setupWebGL(canvas);
  if (!gl) {
    return;  // Do nothing
  }
  program = createProgramFromTags("vertex-shader", "fragment-shader");

  tdl.fast.matrix4.perspective(
        projection,
        tdl.math.degToRad(60),
        canvas.clientWidth / canvas.clientHeight,
        1,
        5000);

  tdl.fast.matrix4.lookAt(
      view,
      eye,
      [0.0, 0.0, -4.0],
      [0.0, 1.0, 0.0]);
  gl.depthMask(true);
  gl.clearColor(0.1,0.1,0.1,1);
  gl.clearDepth(1);
  gl.enable(gl.CULL_FACE);
  gl.enable(gl.DEPTH_TEST);
}

function setScene(scene) {
  sceneToRender = scene;
}

function resizeCanvas() {
  if (canvas.width != $("body").width() ||
      canvas.height != window.innerHeight - $(".navbar").height()) {
    canvas.width = $("body").width();
    canvas.height = window.innerHeight - $(".navbar").height();
    gl.viewport(0, 0, canvas.clientWidth, canvas.clientHeight);
  }
}

function render() {
  resizeCanvas();
  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  sceneToRender.draw();
  renderProcesss = tdl.webgl.requestAnimationFrame(render, canvas);
}

function stopRender() {
  tdl.webgl.cancelRequestAnimationFrame(renderProcesss);
}


