function Scene (program) {
  this.objects = [];
  this.program = program;
  this.view = new Float32Array(16);

  tdl.fast.matrix4.lookAt(
      this.view,
      [0.0, 0.0, 3.0],
      [0.0, 0.0, 0.0],
      [0.0, 1.0, 0.0]);
}

Scene.prototype.camera = function(eye, center, up) {
  tdl.fast.matrix4.lookAt(
      this.view,
      eye,
      center,
      up);
};

Scene.prototype.draw = function(projection) {
  for (var i = 0; i < this.objects.length; i++) {
    this.objects[i].draw(this.view, projection);
  };
};

Scene.prototype.createObject = function() {
  var object = new GameObject(this.program);
  this.objects.push(object);
  return object;
}

function Animation (start, end) {
  this.start = start;
  this.end = end;
  this.speed = 1;
  this.currentFrame = 0;
  this.loop = true;
}

Animation.prototype.getFrame = function() {
  var frame = this.start + this.currentFrame;
  this.currentFrame += this.speed;
  if(this.currentFrame > this.end) {
    if(this.loop) {
      this.currentFrame = 0;
    } else {
      this.currentFrame = this.end - this.start;
    }
  }
  return frame;
};

function GameObject (program) {
  var cube = tdl.primitives.createCube(1.0);
  var textures = {diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
  var model = new tdl.models.Model(program, cube, textures);
  this.program = program;
  this.model = model;
  this.animations = [];
  this.currentAnimation = 0;
  this.x = 0.0;
  this.y = 0.0;
  this.z = 0.0;
  this.width = 1.0;
  this.height = 1.0;
  this.depth = 1.0;
  this.boundWidth = this.width;
  this.boundHeight = this.height;
  this.boundDepth = this.depth;
  this.rotateX = 0.0;
  this.rotateY = 0.0;
  this.rotateZ = 0.0;
  this.transform = new Float32Array(16);
  this.color = [1.0, 1.0, 1.0];
  this.renderBounds = false;
}

GameObject.prototype.changeAnimation = function (id) {
  this.currentAnimation = id;
  this.animations[this.currentAnimation].currentFrame = 0;
};

GameObject.prototype.loadModelFromJson = function (name) {
  var modelJson = "";
  var texture = "/assets/" + name + ".png";
  $.ajax({
      url: 'model_handler/show.json',
      data: { model:name },
      type: 'GET',
      success: function (data) {
        modelJson = data;
      },
      contentType: "application/json; charset=utf-8",
      dataType: "json",
      async: false
  }); 
  modelJson = JSON.parse( modelJson );
  if(typeof modelJson.model != "undefined") {
    var positions = modelJson.model.position;
    var normals = modelJson.model.normal;
    var bindShape = modelJson.skeleton.bindShape;

    for (var i = 0; i < positions.length; i+= 3) {
      var position = new Float32Array(4);
      position[0] = positions[i];
      position[1] = positions[i+1];
      position[2] = positions[i+2];
      position[3] = 1;
      var boundPosition = new Float32Array(4);
      tdl.fast.mulMatrix4Vector(boundPosition, bindShape, position);
      positions[i] = boundPosition[0];
      positions[i+1] = boundPosition[1]; 
      positions[i+2] = boundPosition[2];

      var normal = new Float32Array(4);
      normal[0] = normals[i];
      normal[1] = normals[i+1];
      normal[2] = normals[i+2];
      normal[3] = 0;
      var boundNormal = new Float32Array(4);
      tdl.fast.mulMatrix4Vector(boundNormal, bindShape, normal);
      normals[i] = boundNormal[0];
      normals[i+1] = boundNormal[1]; 
      normals[i+2] = boundNormal[2];
    };

    var positions = new tdl.primitives.AttribBuffer(3, positions);
    var normals = new tdl.primitives.AttribBuffer(3, normals);
    var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.model.texCoord);
    var skinWeights = new tdl.primitives.AttribBuffer(4, modelJson.model.skinWeights);
    var skinJoints = new tdl.primitives.AttribBuffer(4, modelJson.model.skinJoints);
    var indices = new tdl.primitives.AttribBuffer(3, modelJson.model.indices, 'Uint16Array');
    var primitives = {
      position: positions,
      normal: normals,
      texCoord: texCoords,
      indices: indices,
      skinJoints: skinJoints,
      skinWeights: skinWeights
    };
    
    var textures;

    if (typeof texture != 'undefined') {
      textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
    } else {
      textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
    }

    var model = new tdl.models.Model(this.program, primitives, textures);
    model.skeleton = modelJson.skeleton;
    this.model = model;

  } else {

    var empty = new Float32Array(modelJson.indices.length*4);

    var positions = new tdl.primitives.AttribBuffer(3, modelJson.position);
    var normals = new tdl.primitives.AttribBuffer(3, modelJson.normal);
    var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.texCoord);
    var skinWeights = new tdl.primitives.AttribBuffer(4, empty);
    var skinJoints = new tdl.primitives.AttribBuffer(4, empty);
    var indices = new tdl.primitives.AttribBuffer(3, modelJson.indices, 'Uint16Array');
    var primitives = {
      position: positions,
      normal: normals,
      texCoord: texCoords,
      indices: indices,
      skinJoints: skinJoints,
      skinWeights: skinWeights};
    
    var textures;

    if (typeof texture != 'undefined') {
      textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
    } else {
      textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
    }

    var model = new tdl.models.Model(this.program, primitives, textures);
    this.model = model;

  }
  
}

GameObject.prototype.loadModelFromInput = function (id) {
  var modelJson = JSON.parse( $("input#" + id).val() );
  var texture = "/assets/" + $("input#" + id).attr("title") + ".png";
  if(typeof modelJson.model != "undefined") {

    var positions = modelJson.model.position;
    var normals = modelJson.model.normal;
    var bindShape = modelJson.skeleton.bindShape;

    for (var i = 0; i < positions.length; i+= 3) {
      var position = new Float32Array(4);
      position[0] = positions[i];
      position[1] = positions[i+1];
      position[2] = positions[i+2];
      position[3] = 1;
      var boundPosition = new Float32Array(4);
      tdl.fast.mulMatrix4Vector(boundPosition, bindShape, position);
      positions[i] = boundPosition[0];
      positions[i+1] = boundPosition[1]; 
      positions[i+2] = boundPosition[2];

      var normal = new Float32Array(4);
      normal[0] = normals[i];
      normal[1] = normals[i+1];
      normal[2] = normals[i+2];
      normal[3] = 0;
      var boundNormal = new Float32Array(4);
      tdl.fast.mulMatrix4Vector(boundNormal, bindShape, normal);
      normals[i] = boundNormal[0];
      normals[i+1] = boundNormal[1]; 
      normals[i+2] = boundNormal[2];
    };

    var positions = new tdl.primitives.AttribBuffer(3, positions);
    var normals = new tdl.primitives.AttribBuffer(3, normals);
    var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.model.texCoord);
    var skinWeights = new tdl.primitives.AttribBuffer(4, modelJson.model.skinWeights);
    var skinJoints = new tdl.primitives.AttribBuffer(4, modelJson.model.skinJoints);
    var indices = new tdl.primitives.AttribBuffer(3, modelJson.model.indices, 'Uint16Array');
    var primitives = {
      position: positions,
      normal: normals,
      texCoord: texCoords,
      indices: indices,
      skinJoints: skinJoints,
      skinWeights: skinWeights
    };
    
    var textures;

    if (typeof texture == 'undefined' ) {
      textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
    } else {
      textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
    }

    var model = new tdl.models.Model(this.program, primitives, textures);
    model.skeleton = modelJson.skeleton;
    this.model = model;

  } else {

    var empty = new Float32Array(modelJson.indices.length*4);

    var positions = new tdl.primitives.AttribBuffer(3, modelJson.position);
    var normals = new tdl.primitives.AttribBuffer(3, modelJson.normal);
    var texCoords = new tdl.primitives.AttribBuffer(2, modelJson.texCoord);
    var skinWeights = new tdl.primitives.AttribBuffer(4, empty);
    var skinJoints = new tdl.primitives.AttribBuffer(4, empty);
    var indices = new tdl.primitives.AttribBuffer(3, modelJson.indices, 'Uint16Array');
    var primitives = {
      position: positions,
      normal: normals,
      texCoord: texCoords,
      indices: indices,
      skinJoints: skinJoints,
      skinWeights: skinWeights};
    
    var textures;

    if (typeof texture == 'undefined' ) {
      textures = { diffuseSampler: tdl.textures.loadTexture([255, 255, 255, 1.0])};
    } else {
      textures = { diffuseSampler: tdl.textures.loadTexture(texture) };
    }

    var model = new tdl.models.Model(this.program, primitives, textures);
    this.model = model;
  }
}

GameObject.prototype.setTexture = function(image_path) {
  var textures = {
    diffuseSampler: tdl.textures.loadTexture(image_path)};
    this.model.textures = textures;
};

GameObject.prototype.setPose = function(frame) {
  var boneSource = this.model.skeleton.bones;
  var bones = new Float32Array(64*16);
  this.processBone(boneSource, bones, frame, 0);

  for (var i = 0; i < boneSource.length; i++) {
    var transform = bones.subarray(i*16, (i+1)*16);
    var inverse = new Float32Array(boneSource[i].inverseBind);
    tdl.fast.rowMajor.mulMatrixMatrix4(transform, transform, inverse);
    tdl.fast.matrix4.transpose(transform, transform);
    bones.set(transform, i*16);
  };

  return bones;
};

GameObject.prototype.processBone = function(boneSource, bones, frame, boneId, parentId) {
  var maxFrame = this.model.skeleton.totalFrames;
  var keyFrames = boneSource[boneId].keyFrames;
  var prevFrame = 0;
  var nextFrame = maxFrame;
  var exact = false;

  for(var keyFrame in keyFrames) {
    var key = parseFloat(keyFrame);
    if(key == frame) {
      exact = true;
      nextFrame = key;
      break;
    }

    if(key <= frame && key > prevFrame) {
      prevFrame = key;
    }

    if(key >= frame && (key < nextFrame)) {
      nextFrame = key;
    }
  }

  var transform

  if(exact || prevFrame == nextFrame) {
    transform = new Float32Array(keyFrames[nextFrame]);
  } else {
    var range = nextFrame - prevFrame;
    var distPrev = frame - prevFrame;
    var ratioNext = distPrev/range;
    var ratioPrev = 1 - ratioNext;

    var firstTransform = new Float32Array(keyFrames[prevFrame]);
    var nextTransform = new Float32Array(keyFrames[nextFrame]);
    tdl.fast.mulScalarMatrix(firstTransform, ratioPrev, firstTransform);
    tdl.fast.mulScalarMatrix(nextTransform, ratioNext, nextTransform);
    transform =  new Float32Array(16);
    for (var i = 0; i < 16; i++) {
      transform[i] = firstTransform[i] + nextTransform[i];
    };
  }


  if(typeof parentId != "undefined") {
    var parent = bones.subarray(parentId*16, (parentId+1)*16);
    tdl.fast.rowMajor.mulMatrixMatrix4(transform, parent, transform);
  } else {
    var skelTransform = new Float32Array(this.model.skeleton.transform);
    tdl.fast.rowMajor.mulMatrixMatrix4(transform, skelTransform, transform);
  }

  bones.set(transform, boneId*16);

  for (var i = boneSource[boneId].children.length - 1; i >= 0; i--) {
    this.processBone(boneSource, bones, frame, boneSource[boneId].children[i], boneId);
  };

};
  
GameObject.prototype.draw = function(view, projection) {

  tdl.fast.identity4(this.transform);
  tdl.fast.matrix4.rotateX(this.transform, tdl.math.degToRad(this.rotateX));
  tdl.fast.matrix4.rotateY(this.transform, tdl.math.degToRad(this.rotateY));
  tdl.fast.matrix4.rotateZ(this.transform, tdl.math.degToRad(this.rotateZ));
  tdl.fast.matrix4.scale(this.transform, [this.width, this.height, this.depth]);
  tdl.fast.matrix4.setTranslation(this.transform, [this.x, this.y, this.z]);
  var mvp = new Float32Array(16);
  tdl.fast.matrix4.mul(mvp, this.transform, view);
  tdl.fast.matrix4.mul(mvp, mvp, projection);
  var transformInv = new Float32Array(16);
  tdl.fast.transpose4(transformInv, this.transform);
  tdl.fast.inverse4(transformInv, transformInv);

  this.model.drawPrep();

  if(typeof this.model.skeleton != "undefined") {
    var currentFrame = 0;
    if(this.animations.length > 0) {
      currentFrame = this.animations[this.currentAnimation].getFrame();
    }
    var bones = this.setPose(currentFrame);
    
    this.model.draw({"transform": this.transform, "transformInv": transformInv, "color": this.color, "mvp": mvp, "hasSkeleton" : true, "bones": bones});
  } else {
    this.model.draw({"transform": this.transform, "transformInv": transformInv, "color": this.color, "mvp": mvp, "hasSkeleton" : false});
  }

  if(this.renderBounds) {
    var cube = tdl.primitives.createCube(1.0);
    var textures = {diffuseSampler: tdl.textures.loadTexture([255, 0, 0, 1.0])};
    var boundingBox = new tdl.models.Model(this.program, cube, textures);
    var boxTransform = new Float32Array(16);
    tdl.fast.identity4(boxTransform);
    tdl.fast.matrix4.scale(boxTransform, [this.boundWidth, this.boundHeight, this.boundDepth]);
    tdl.fast.matrix4.setTranslation(boxTransform, [this.x, this.y, this.z]);
    var mvp = new Float32Array(16);
    tdl.fast.matrix4.mul(mvp, boxTransform, view);
    tdl.fast.matrix4.mul(mvp, mvp, projection);
    var boxTransformInv = new Float32Array(16);
    tdl.fast.inverse4(boxTransformInv, boxTransform)
    boundingBox.drawPrep();
    boundingBox.draw({"transform": boxTransform, "transformInv": boxTransformInv, "color": this.color, "mvp": mvp});
  }

};

function Renderer(canvas) {
  this.canvas = canvas;
  this.canvas.width = $("body").width();
  this.canvas.height = window.innerHeight - $(".navbar").height();

  this.gl = tdl.webgl.setupWebGL(this.canvas);
  if (!this.gl) {
    return;  // Do nothing
  }
  this.program = this.createProgramFromTags("vertex-shader", "fragment-shader");

  this.projection = new Float32Array(16);
  tdl.fast.matrix4.perspective(
        this.projection,
        tdl.math.degToRad(60),
        this.canvas.clientWidth / this.canvas.clientHeight,
        1,
        5000);

  this.gl.depthMask(true);
  this.color = [0.1,0.1,0.1];
  this.gl.clearDepth(1);
  this.gl.enable(this.gl.CULL_FACE);
  this.gl.enable(this.gl.DEPTH_TEST);
}

Renderer.prototype.createProgramFromTags = function(vertexTagId, fragmentTagId) {
  return tdl.programs.loadProgram(
      document.getElementById(vertexTagId).text,
      document.getElementById(fragmentTagId).text);
}

Renderer.prototype.createScene = function() {
  var scene = new Scene(this.program);
  this.sceneToRender = scene;
  return scene;
}

Renderer.prototype.resizeCanvas = function() {
  if (this.canvas.width != $("body").width() ||
      this.canvas.height != window.innerHeight - $(".navbar").height()) {
    this.canvas.width = $("body").width();
    this.canvas.height = window.innerHeight - $(".navbar").height();
    this.gl.viewport(0, 0, this.canvas.width, this.canvas.height);
    tdl.fast.matrix4.perspective(
        this.projection,
        tdl.math.degToRad(60),
        this.canvas.clientWidth / this.canvas.clientHeight,
        1,
        5000);
  }
}

Renderer.prototype.render = function() {
  this.gl.clearColor(this.color[0], this.color[1], this.color[2], 1.0);
  this.resizeCanvas();
  this.gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
  this.sceneToRender.draw(this.projection);
  this.renderProcesss = tdl.webgl.requestAnimationFrame(this.render.bind(this), this.canvas);
}

Renderer.prototype.stopRender = function() {
  tdl.webgl.cancelRequestAnimationFrame(this.renderProcesss);
}


